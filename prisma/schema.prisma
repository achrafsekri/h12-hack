// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // uncomment next line if you use Prisma <5.10
    // directUrl = env("DATABASE_URL_UNPOOLED")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    points        Int       @default(0)
    accounts      Account[]
    sessions      Session[]
    likes         Like[]
    selfies       Selfie[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Selfie {
    id        String   @id @default(cuid())
    imageUrl  String
    site      String
    points    Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    likes     Like[]
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
    id       String @id @default(cuid())
    selfieId String
    selfie   Selfie @relation(fields: [selfieId], references: [id], onDelete: Cascade)
    userId   String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Site {
    id          String   @id @default(uuid())
    nom         String
    addresse    String
    description String?
    likes       Int      @default(0)
    images      String[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}
